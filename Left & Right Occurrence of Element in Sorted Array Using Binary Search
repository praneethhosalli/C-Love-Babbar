#include <iostream>
using namespace std;

int right(int arr[],int n,int target){
    int start = 0;
    int end = n-1;
    int index= -1;
    
    
    while(start<=end){
        int mid = (start+end)/2;
        
        if(arr[mid]==target){
            index = mid;
            start =  mid + 1;
            
        }
        else if (arr[mid]<target){
            start =  mid + 1;
        }
        else if (arr[mid]>target){
            end = mid  - 1;
        }
    }
    
    if (index >=0){
        return index;
    }
    else{
        return -1;
    }
    
}
int binarysearch(int arr[],int n,int target){
    int start = 0;
    int end = n-1;
    int index= -1;
    
    
    while(start<=end){
        int mid = (start+end)/2;
        
        if(arr[mid]==target){
            index = mid;
            end = mid -1;
        }
        else if (arr[mid]<target){
            start =  mid + 1;
        }
        else if (arr[mid]>target){
            end = mid  - 1;
        }
    }
    
    if (index >=0){
        return index;
    }
    else{
        return -1;
    }
    
}






int main() {

    int arr[8] = {10,20,30,40,50,60,70,80};
    // int n = arr[] / arr[0];
    int n = 8;
    int target = 30;
    int ans = binarysearch(arr,n,target);
    if(ans== -1){
        cout<<" Left Most  Occurence is Not found";
    }
    else{
        cout<<"Left most Occurence of  Element "<<ans;
    }
    
    cout<<endl;
    
    int bns = right(arr,n,target);
    if(bns== -1){
        cout<<" Right Most Occurence of element is Not found";
    }
    else{
        cout<<"Right Most Occurence of  the   Element "<<bns;
    }

    return 0;
}




//// Total Occurences 



#include <iostream>
using namespace std;

int right(int arr[],int n,int target){
    int start = 0;
    int end = n-1;
    int index= -1;
    
    
    while(start<=end){
        int mid = (start+end)/2;
        
        if(arr[mid]==target){
            index = mid;
            start =  mid + 1;
            
        }
        else if (arr[mid]<target){
            start =  mid + 1;
        }
        else if (arr[mid]>target){
            end = mid  - 1;
        }
    }
    
    if (index >=0){
        return index;
    }
    else{
        return -1;
    }
    
}
int binarysearch(int arr[],int n,int target){
    int start = 0;
    int end = n-1;
    int index= -1;
    
    
    while(start<=end){
        int mid = (start+end)/2;
        
        if(arr[mid]==target){
            index = mid;
            end = mid -1;
        }
        else if (arr[mid]<target){
            start =  mid + 1;
        }
        else if (arr[mid]>target){
            end = mid  - 1;
        }
    }
    
    if (index >=0){
        return index;
    }
    else{
        return -1;
    }
    
}






int main() {

    int arr[8] = {10,20,30,30,30,30,30,30};
    // int n = arr[] / arr[0];
    int n = 8;
    int target = 30;
    int ans = binarysearch(arr,n,target);
    if(ans== -1){
        cout<<" Left Most  Occurence is Not found";
    }
    else{
        cout<<"Left most Occurence of  Element "<<ans;
    }
    
    cout<<endl;
    
    int bns = right(arr,n,target);
    if(bns== -1){
        cout<<" Right Most Occurence of element is Not found";
    }
    else{
        cout<<"Right Most Occurence of  the   Element "<<bns;
        cout<<endl;
        cout<<"Total Occurence is "<<bns-ans+1;
        
    }

    return 0;
}
